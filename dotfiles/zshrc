autoload -U compinit; compinit

export GOROOT="/usr/local/go"
export GOPATH="$HOME/go"
export KUBECONFIG="$HOME/.kube/config"

[[ -x /opt/homebrew/bin/brew ]] && eval $(/opt/homebrew/bin/brew shellenv)
command -v starship &> /dev/null && eval   "$(starship init zsh)"
command -v kubectl  &> /dev/null && source <(kubectl completion zsh)
[[ -f /opt/dev/sh/chruby/chruby.sh ]] && { type chruby >/dev/null 2>&1 || chruby () { source /opt/dev/sh/chruby/chruby.sh; chruby "$@"; } }
[[ -d ~/.kube ]] && for file in ~/.kube/*; do [[ $file = ~/.kube/config* ]] && export KUBECONFIG="${KUBECONFIG}:${file}"; done
[[ -f ~/.zsh/plugins/zsh-autosuggestions/zsh-autosuggestions.zsh ]] && source ~/.zsh/plugins/zsh-autosuggestions/zsh-autosuggestions.zsh
[[ -f ~/.zsh/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh ]] && source ~/.zsh/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
command -v dircolors &> /dev/null && eval "$(dircolors $HOME/.dircolors)"

export EDITOR="code -w"

###
## Aliases
###
command -v kubectl    &> /dev/null && alias k=kubectl
command -v kubens     &> /dev/null && alias kn=kubens
command -v kubectx    &> /dev/null && alias kc=kubectx
command -v systemctl  &> /dev/null && alias sc=systemctl
command -v journalctl &> /dev/null && alias jc=journalctl
command -v bat        &> /dev/null && alias cat=bat
command -v batcat     &> /dev/null && alias bat=batcat && alias cat=batcat
command -v podman     &> /dev/null && alias docker=podman
if command -v colorls &> /dev/null; then
    alias ls="colorls --dark"
else
    alias ls="ls --color=always"
fi


if [[ -d ~/.config/spin ]]; then
    command -v kubectl &> /dev/null && alias kprod='kubectl --context "$(cat ~/.config/spin/spin.up.dev/cluster)" -n "$(cat ~/.config/spin/spin.up.dev/namespace)"'
    command -v kubectl &> /dev/null && alias kdev='kubectl --context "$(cat ~/.config/spin/localhost/cluster)" -n "$(cat ~/.config/spin/localhost/namespace)"'
fi

if [[ -d ~/.krew ]]; then
    export PATH="${KREW_ROOT:-$HOME/.krew}/bin:$PATH"
fi

###
## Nix
###
if [[ -f "$HOME/.nix-profile/etc/profile.d/nix.sh" ]]; then
. "$HOME/.nix-profile/etc/profile.d/nix.sh"
fi

command -v nix-shell &> /dev/null && alias nixify='nix-shell $HOME/.config/shell.nix --run "zsh"'

###
## Functions
###
snap() {
    nap "$@"
    if [[ `git -C "$HOME/.nap" status --porcelain '.'` ]]; then
        git -C "$HOME/.nap" add .
        git -C "$HOME/.nap" commit -m "snap autosave"
        git -C "$HOME/.nap" push
    fi
}

reload() {
    source ~/.zprofile
    source ~/.zshrc
}

awsp() {
    export AWS_PROFILE=$(aws configure list-profiles | fzf)
}

export CODE_ROOT_FOLDER="$HOME/src/github.com"
dev() {
    case $1 in
        cd)
            if [[ ! -z $2 && -d "$CODE_ROOT_FOLDER/$2" ]]; then
                cd "$CODE_ROOT_FOLDER/$2"
            else
                dir=$(find $CODE_ROOT_FOLDER -maxdepth 2 -mindepth 2 | cut -c$((${#CODE_ROOT_FOLDER}+2))- | sort | fzf)
                [[ ! -z $dir ]] && cd "$CODE_ROOT_FOLDER/$dir"
            fi
        ;;
        code)
            if [[ ! -z $2 && -d "$CODE_ROOT_FOLDER/$2" ]]; then
                code "$CODE_ROOT_FOLDER/$2"
            else
                dir=$(find $CODE_ROOT_FOLDER -maxdepth 2 -mindepth 2 | cut -c$((${#CODE_ROOT_FOLDER}+2))- | sort | fzf)
                [[ ! -z $dir ]] && code "$CODE_ROOT_FOLDER/$dir"
            fi
        ;;
        clone)
            if [[ ! -z $2 ]]; then
                if [[ ! -d "$CODE_ROOT_FOLDER/$2" ]]; then
                    git clone "https://github.com/$2.git" "$CODE_ROOT_FOLDER/$2"
                fi
                if [[ -d "$CODE_ROOT_FOLDER/$2" ]]; then
                    cd "$CODE_ROOT_FOLDER/$2"
                fi
            else
                echo "Usage: dev clone <repo>"
            fi
        ;;
        *)
            echo "Usage: dev <cd|code|clone>"
        ;;
    esac
}
