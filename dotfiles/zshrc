autoload -U compinit; compinit

if [ -z "$GOROOT" ]; then
    export GOROOT="/usr/local/go"
fi
if [ -z "$GOPATH" ]; then
    export GOPATH="$HOME/go"
fi

export KUBECONFIG="$HOME/.kube/config"

[[ -x /opt/homebrew/bin/brew ]] && eval $(/opt/homebrew/bin/brew shellenv)
command -v starship &> /dev/null && eval   "$(starship init zsh)"
command -v kubectl  &> /dev/null && source <(kubectl completion zsh)
command -v direnv &> /dev/null && eval "$(direnv hook zsh)"
[[ -f /opt/dev/sh/chruby/chruby.sh ]] && { type chruby >/dev/null 2>&1 || chruby () { source /opt/dev/sh/chruby/chruby.sh; chruby "$@"; } }
[[ -d ~/.kube ]] && for file in ~/.kube/*; do [[ $file = ~/.kube/config* ]] && export KUBECONFIG="${KUBECONFIG}:${file}"; done
[[ -f ~/.zsh/plugins/zsh-autosuggestions/zsh-autosuggestions.zsh ]] && source ~/.zsh/plugins/zsh-autosuggestions/zsh-autosuggestions.zsh
[[ -f ~/.zsh/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh ]] && source ~/.zsh/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
command -v dircolors &> /dev/null && eval "$(dircolors $HOME/.dircolors)"

export EDITOR="code -w"

###
## Aliases
###
command -v kubectl    &> /dev/null && alias k=kubectl
command -v kubens     &> /dev/null && alias kn=kubens
command -v kubectx    &> /dev/null && alias kc=kubectx
command -v systemctl  &> /dev/null && alias sc=systemctl
command -v journalctl &> /dev/null && alias jc=journalctl
command -v bat        &> /dev/null && alias cat=bat
command -v batcat     &> /dev/null && alias bat=batcat && alias cat=batcat
command -v podman     &> /dev/null && alias docker=podman
command -v bolt       &> /dev/null && alias b=bolt && alias bx="bolt exec --" && alias up="bolt up"
command -v gum        &> /dev/null && alias fzf="gum filter"
if command -v colorls &> /dev/null; then
    alias ls="colorls --dark"
else
    alias ls="ls --color=always"
fi

CHROME_EXE_PATH="/Applications/Google\ Chrome.app/Contents/MacOS/Google\ Chrome"
alias chrome="$CHROME_EXE_PATH"

if [[ -d ~/.config/spin ]]; then
    command -v kubectl &> /dev/null && alias kprod='kubectl --context "$(cat ~/.config/spin/spin.up.dev/cluster)" -n "$(cat ~/.config/spin/spin.up.dev/namespace)"'
    command -v kubectl &> /dev/null && alias kdev='kubectl --context "$(cat ~/.config/spin/localhost/cluster)" -n "$(cat ~/.config/spin/localhost/namespace)"'
fi

if [[ -d ~/.krew ]]; then
    export PATH="${KREW_ROOT:-$HOME/.krew}/bin:$PATH"
fi

###
## Nix
###
if [[ -f "$HOME/.nix-profile/etc/profile.d/nix.sh" ]]; then
. "$HOME/.nix-profile/etc/profile.d/nix.sh"
fi

command -v nix-shell &> /dev/null && alias nixify='nix-shell $HOME/.config/shell.nix --run "zsh"'

###
## NVM
###
export NVM_DIR="$HOME/.nvm"
[ -s "/opt/homebrew/opt/nvm/nvm.sh" ] && \. "/opt/homebrew/opt/nvm/nvm.sh"  # This loads nvm
[ -s "/opt/homebrew/opt/nvm/etc/bash_completion.d/nvm" ] && \. "/opt/homebrew/opt/nvm/etc/bash_completion.d/nvm"  # This loads nvm bash_completion

###
## Pyenv
###
# export PYENV_ROOT="$HOME/.pyenv"
# command -v pyenv &> /dev/null && eval "$(pyenv init -)"

###
## Functions
###
reload() {
    source ~/.zprofile
    source ~/.zshrc
}

awsp() {
    export AWS_PROFILE=$(aws configure list-profiles | fzf)
}

function url_encode() {
    echo "$@" \
    | sed \
        -e 's/%/%25/g' \
        -e 's/ /%20/g' \
        -e 's/!/%21/g' \
        -e 's/"/%22/g' \
        -e "s/'/%27/g" \
        -e 's/#/%23/g' \
        -e 's/(/%28/g' \
        -e 's/)/%29/g' \
        -e 's/+/%2b/g' \
        -e 's/,/%2c/g' \
        -e 's/-/%2d/g' \
        -e 's/:/%3a/g' \
        -e 's/;/%3b/g' \
        -e 's/?/%3f/g' \
        -e 's/@/%40/g' \
        -e 's/\$/%24/g' \
        -e 's/\&/%26/g' \
        -e 's/\*/%2a/g' \
        -e 's/\./%2e/g' \
        -e 's/\//%2f/g' \
        -e 's/\[/%5b/g' \
        -e 's/\\/%5c/g' \
        -e 's/\]/%5d/g' \
        -e 's/\^/%5e/g' \
        -e 's/_/%5f/g' \
        -e 's/`/%60/g' \
        -e 's/{/%7b/g' \
        -e 's/|/%7c/g' \
        -e 's/}/%7d/g' \
        -e 's/~/%7e/g'
}

@code() {
    if [ -z "$@" ]; then
        open "https://code.dev.dexus.io"
    else
        query=$(url_encode "$@")
        open "https://code.dev.dexus.io/search?q=$query"
    fi
}

launch_code() {
    folder="$1"
    cur_dir=$(pwd)
    cd $folder
    echo "launching code..."
    code .
    cd $cur_dir
}

export CODE_ROOT_FOLDER="$HOME/src/github.com"
dev() {
    case $1 in
        cd)
            dir=$(find $CODE_ROOT_FOLDER -maxdepth 2 -mindepth 2 | cut -c$((${#CODE_ROOT_FOLDER}+2))- | sort | fzf)
            [[ ! -z $dir ]] && cd "$CODE_ROOT_FOLDER/$dir"
        ;;
        code)
            dir=$(find $CODE_ROOT_FOLDER -maxdepth 2 -mindepth 2 | cut -c$((${#CODE_ROOT_FOLDER}+2))- | sort | fzf)
            [[ ! -z $dir ]] && launch_code "$CODE_ROOT_FOLDER/$dir"
        ;;
        clone)
            if [[ ! -z $2 ]]; then
                if [[ ! -d "$CODE_ROOT_FOLDER/$2" ]]; then
                    git clone "https://github.com/$2.git" "$CODE_ROOT_FOLDER/$2"
                fi
                if [[ -d "$CODE_ROOT_FOLDER/$2" ]]; then
                    cd "$CODE_ROOT_FOLDER/$2"
                fi
            else
                echo "Usage: dev clone <repo>"
            fi
        ;;
        *)
            echo "Usage: dev <cd|code|clone>"
        ;;
    esac
}

awsgb() {
    export AWS_PROFILE="greenbits"
    TOKEN=$(AWS_ACCESS_KEY_ID="" AWS_SECRET_ACCESS_KEY="" aws sts get-session-token --serial-number "arn:aws:iam::088585850462:mfa/mobile" --token-code "$(gum input --prompt "MFA Code: ")")
    export AWS_ACCESS_KEY_ID=$(echo $TOKEN | jq -r .Credentials.AccessKeyId)
    export AWS_SECRET_ACCESS_KEY=$(echo $TOKEN | jq -r .Credentials.SecretAccessKey)
    export AWS_SESSION_TOKEN=$(echo $TOKEN | jq -r .Credentials.SessionToken)
}
